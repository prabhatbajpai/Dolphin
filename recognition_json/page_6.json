{
  "source_file": "./demo/page_imgs/page_6.pdf",
  "total_pages": 9,
  "pages": [
    {
      "page_number": 1,
      "elements": [
        {
          "label": "header",
          "bbox": [
            78,
            17,
            123,
            53
          ],
          "text": "GvF",
          "reading_order": 0
        },
        {
          "label": "header",
          "bbox": [
            149,
            17,
            544,
            44
          ],
          "text": "This CVPR paper is the Open Access version, provided by the Computer Vision Foundation.\nExcept for this watermark, it is identical to the version available on IEEE Xplore.",
          "reading_order": 1
        },
        {
          "label": "title",
          "bbox": [
            173,
            116,
            499,
            135
          ],
          "text": "Deep Residual Learning for Image Recognition",
          "reading_order": 2
        },
        {
          "label": "author",
          "bbox": [
            149,
            170,
            221,
            188
          ],
          "text": "Kaiming He",
          "reading_order": 3
        },
        {
          "label": "author",
          "bbox": [
            248,
            170,
            329,
            188
          ],
          "text": "Xiangyu Zhan",
          "reading_order": 4
        },
        {
          "label": "author",
          "bbox": [
            364,
            170,
            445,
            188
          ],
          "text": "Shaoqing Ren",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            282,
            188,
            391,
            206
          ],
          "text": "Microsoft Research",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            221,
            206,
            454,
            224
          ],
          "text": "\\{kahe, v-xiangz, v-shren, jiansun\\}@microsoft.com",
          "reading_order": 7
        },
        {
          "label": "sec",
          "bbox": [
            165,
            250,
            215,
            268
          ],
          "text": "Abstract",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            51,
            277,
            329,
            476
          ],
          "text": "Deeper neural networks are more difficult to train. We\npresent a residual learning framework to ease the training\nof networks that are substantially deeper than those used\npreviously. We explicitly reformulate the layers as learn-\ning residual functions with reference to the layer inputs, in-\nstead of learning unprecedented junctions. We provide com-\nprehensive empirical evidence showing that these residual\nnetworks are easier to optimize, and can gain accuracy from\nconsiderably increased depth. On the ImageNet dataset we\nevaluate $8\\times$ residual nets with a depth of up to 152 layers— $8\\times$\ndeeper than VGG nets [40] but still having lower complex-\nity. An ensemble of these residual nets achieves 3.57 % error\non the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis\non CIFAR-10 with 100 and 1000 layers.",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            51,
            482,
            329,
            591
          ],
          "text": "The depth of representations is of central importance\nfor many visual recognition tasks. Solely due to our ex-\ntremely deep representations, we obtain a 28 % relative im-\nprovement on the COCO object detection dataset. Deep\nresidual nets are foundations of our submissions to ILSVRC\n& COCO 2015 competitions $^1$ , where we also won the 1st\nplaces on the tasks of ImageNet detection, ImageNet local-\nization, COCO detection, and COCO segmentation.",
          "reading_order": 10
        },
        {
          "label": "sec",
          "bbox": [
            51,
            606,
            149,
            618
          ],
          "text": "1. Introduction",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            51,
            627,
            329,
            775
          ],
          "text": "Deep convolutional neural networks [22, 21] have led\nto a series of breakthroughs for image classification [21,\n49, 39] . Deep networks naturally integrate low/mid/high-\nlevel features [49] and classifiers in an end-to-end multi-\nlayer fashion, and the “ levels\" of features can be enriched\nby the number of stacked layers (depth). Recent evidence\n[40, 43] reveals that network depth is of crucial importance,\nand the leading results [40, 43, 12, 16] on the challenging\nImageNet dataset [35] all exploit \"very deep\" [40] models,\nwith a depth of sixteen [40] to thirty [16] . Many other non-\ntrivial visual recognition tasks [7, 11, 6, 32, 27] have also",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            347,
            411,
            535,
            421
          ],
          "text": "greatly benefited from very deep models.",
          "reading_order": 13
        },
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_001_figure_014.png)",
          "figure_path": "figures/page_6_page_001_figure_014.png",
          "bbox": [
            347,
            250,
            615,
            340
          ],
          "reading_order": 14
        },
        {
          "label": "cap",
          "bbox": [
            347,
            340,
            616,
            394
          ],
          "text": "Figure 1. Training error (left) and test error (right) on CIFAR-10\nwith 20-layer and 56-layer \"plain\" networks. The deeper network\nhas higher training error, and thus test error. Similar phenomena\non ImageNet is presented in Fig. 4 .",
          "reading_order": 15
        },
        {
          "label": "para",
          "bbox": [
            347,
            421,
            616,
            558
          ],
          "text": "Driven by the significance of depth, a question arises: Is\nlearning better networks as easy as stacking more layers?\nAn obstacle to answering this question was the notorious\nproblem of vanishing/exploding gradients [14, 1, 8] , which\nhamper convergence from the beginning. This problem,\nhowever, has been largely addressed by normalized initial-\nization [23, 8, 36, 12] and intermediate normalization layers\n[16] , which enable networks with tens of layers to start con-\nverging for stochastic gradient descent (SGD) with back-\npropagation [22] .",
          "reading_order": 16
        },
        {
          "label": "para",
          "bbox": [
            347,
            564,
            616,
            672
          ],
          "text": "When deeper networks are able to start converging, a\ndegradation problem has been exposed: with the network\ndepth increasing, accuracy gets saturated (which might be\nunsurprising) and then degrades rapidly. Unexpectedly,\nsuch degradation is not caused by overfitting , and adding\nmore layers to a suitably deep model leads to higher train-\ning error , as reported in [10, 41] and thoroughly verified by\nour experiments. Fig. 1 shows a typical example.",
          "reading_order": 17
        },
        {
          "label": "para",
          "bbox": [
            347,
            672,
            616,
            806
          ],
          "text": "The degradation (of training accuracy) indicates that no\nall systems are similarly easy to optimize. Let us consider a\nshallower architecture and its deeper counterpart that adds\nmore layers onto it. There exists a solution by construction\nto the deeper model: the added layers are identity mapping,\nand the other layers are copied from the learned shallower\nmodel. The existence of this constructed solution indicates\nthat a deeper model should produce no higher training error\nthan its shallower counterpart. But experiments show that\nour current solvers on hand are unable to find solutions that",
          "reading_order": 18
        },
        {
          "label": "fnote",
          "bbox": [
            51,
            787,
            329,
            806
          ],
          "text": "1http://image-net.org/challenges/LSVRC/2015/\nand\nhttp://mscoco.org/dataset/#detections-challenge2015.",
          "reading_order": 19
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "4/0",
          "reading_order": 20
        }
      ]
    },
    {
      "page_number": 2,
      "elements": [
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_002_figure_000.png)",
          "figure_path": "figures/page_6_page_002_figure_000.png",
          "bbox": [
            113,
            80,
            266,
            179
          ],
          "reading_order": 0
        },
        {
          "label": "cap",
          "bbox": [
            96,
            179,
            284,
            189
          ],
          "text": "Figure 2. Residual learning: a building block.",
          "reading_order": 1
        },
        {
          "label": "para",
          "bbox": [
            51,
            206,
            329,
            232
          ],
          "text": "are comparably good or better than the constructed solution\n(or unable to do so in feasible time).",
          "reading_order": 2
        },
        {
          "label": "para",
          "bbox": [
            51,
            232,
            329,
            406
          ],
          "text": "In this paper, we address the degradation problem by\nintroducing a deep residual learning framework. In-\nstead of hoping each few stacked layers directly fit a\ndesired underlying mapping, we explicitly let these lay-\ners fit a residual mapping. Formally, denoting the desired\nunderlying mapping as $\\mathcal{H}(\\mathbf{x})$ , we let the stacked nonlinear\nlayers fit another mapping of $\\mathcal{F}(\\mathbf{x}):=\\mathcal{H}(\\mathbf{x})-\\mathbf{x}$ . The orig-\ninal mapping is recast into $\\mathcal{F}(\\mathbf{x})+\\mathbf{x}$ . We hypothesize that it\nis easier to optimize the residual mapping than to optimize\nthe original, unreferenced mapping. To the extreme, if an\nidentity mapping were optimal, it would be easier to push\nthe residual to zero than to fit an identity mapping by a stack\nof nonlinear layers.",
          "reading_order": 3
        },
        {
          "label": "para",
          "bbox": [
            51,
            412,
            329,
            556
          ],
          "text": "The formulation of $\\mathcal{F}(\\mathbf{x})+\\mathbf{x}$ can be realized by feedfor-\nward neural networks with “ shortcut connections\" (Fig. 2 ).\nShortcut connections [2, 33, 48] are those skipping one or\nmore layers. In our case, the shortcut connections simply\nperform identity mapping, and their outputs are added to\nthe outputs of the stacked layers (Fig. 2 ). Identity short-\ncut connections add neither extra parameter nor computa-\ntional complexity. The entire network can still be trained\nend-to-end by SGD with backpropagation, and can be eas-\nily implemented using common libraries ( e.g. , Caffe [19] )\nwithout modifying the solvers.",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            51,
            556,
            329,
            666
          ],
          "text": "We present comprehensive experiments on ImageNet\n[35] to show the degradation problem and evaluate our\nmethod. We show that: 1) Our extremely deep residual nets\nare easy to optimize, but the counterpart “ plain\" nets (that\nsimply stack layers) exhibit higher training error when the\ndepth increases; 2) Our deep residual nets can easily enjoy\naccuracy gains from greatly increased depth, producing re-\nsults substantially better than previous networks.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            51,
            672,
            329,
            737
          ],
          "text": "Similar phenomena are also shown on the CIFAR-10 set\n[20] , suggesting that the optimization difficulties and the\neffects of our method are not just akin to a particular dataset.\nWe present successfully trained models on this dataset with\nover 100 layers, and explore models with over 1000 layers.",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            51,
            741,
            329,
            806
          ],
          "text": "On the ImageNet classification dataset [35] , we obtain\nexcellent results by extremely deep residual nets. Our 152-\nlayer residual net is the deepest network ever presented on\nImageNet, while still having lower complexity than VGG\nnets [40] . Our ensemble has 3.57% top-5 error on the",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            347,
            80,
            617,
            206
          ],
          "text": "ImageNet test set, and won the 1st place in the ILSVRC\n2015 classification competition . The extremely deep rep-\nresentations also have excellent generalization performance\non other recognition tasks, and lead us to further win the\n1st places on: ImageNet detection , ImageNet localization ,\nCOCO detection , and COCO segmentation in ILSVRC &\nCOCO 2015 competitions. This strong evidence shows that\nthe residual learning principle is generic, and we expect that\nit is applicable in other vision and non-vision problems.",
          "reading_order": 8
        },
        {
          "label": "sec",
          "bbox": [
            347,
            221,
            445,
            232
          ],
          "text": "2. Related Work",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            347,
            241,
            616,
            350
          ],
          "text": "Residual Representations. In image recognition, VLAD\n[18] is a representation that encodes by the residual vectors\nwith respect to a dictionary, and Fisher Vector [30] can be\nformulated as a probabilistic version [18] of VLAD. Both\nof them are powerful shallow representations for image re-\ntrieval and classification [4, 47] . For vector quantization,\nencoding residual vectors [17] is shown to be more effec-\ntive than encoding original vectors.",
          "reading_order": 10
        },
        {
          "label": "para",
          "bbox": [
            347,
            350,
            616,
            514
          ],
          "text": "In low-level vision and computer graphics, for solv-\ning Partial Differential Equations (PDEs), the widely used\nMultigrid method [3] reformulates the system as subprob-\nlems at multiple scales, where each subproblem is respon-\nsible for the residual solution between a coarser and a finer\nscale. An alternative to Multigrid is hierarchical basis pre-\nconditioning [44, 45] , which relies on variables that repre-\nsent residual vectors between two scales. It has been shown\n[3, 44, 45] that these solvers converge much faster than stan-\ndard solvers that are unaware of the residual nature of the\nsolutions. These methods suggest that a good reformulation\nor preconditioning can simplify the optimization.",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            347,
            519,
            616,
            672
          ],
          "text": "Shortcut Connections . Practices and theories that lead to\nshortcut connections [2, 33, 48] have been studied for a long\ntime. An early practice of training multi-layer perceptrons\n(MLPs) is to add a linear layer connected from the network\ninput to the output [33, 48] . In [43, 24] , a few interme-\ndiate layers are directly connected to auxiliary classifiers\nfor addressing vanishing/exploding gradients. The papers\nof [38, 37, 31, 46] propose methods for centering layer re-\nsponses, gradients, and propagated errors, implemented by\nshortcut connections. In [43] , an “ inception\" layer is com-\nposed of a shortcut branch and a few deeper branches.",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            347,
            672,
            616,
            806
          ],
          "text": "Concurrent with our work, “ highway networks\" [41, 42]\npresent shortcut connections with gating functions [15] .\nThese gates are data-dependent and have parameters, in\ncontrast to our identity shortcuts that are parameter-free.\nWhen a gated shortcut is “ closed\" (approaching zero), the\nlayers in highway networks represent non-residual func-\ntions. On the contrary, our formulation always learns\nresidual functions; our identity shortcuts are never closed,\nand all information is always passed through, with addi-\ntional residual functions to be learned. In addition, high-",
          "reading_order": 13
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "102",
          "reading_order": 14
        }
      ]
    },
    {
      "page_number": 3,
      "elements": [
        {
          "label": "para",
          "bbox": [
            51,
            80,
            329,
            108
          ],
          "text": "way networks have not demonstrated accuracy gains with\nextremely increased depth (e,g., over 100 layers).",
          "reading_order": 0
        },
        {
          "label": "sec",
          "bbox": [
            51,
            124,
            203,
            137
          ],
          "text": "3. Deep Residual Learnin",
          "reading_order": 1
        },
        {
          "label": "sub_sec",
          "bbox": [
            51,
            143,
            176,
            157
          ],
          "text": "3.1. Residual Learning",
          "reading_order": 2
        },
        {
          "label": "para",
          "bbox": [
            51,
            161,
            329,
            351
          ],
          "text": "Let us consider $\\mathcal{H}(\\mathbf{x})$ as an underlying mapping to be\nfit by a few stacked layers (not necessarily the entire net),\nwith $\\mathbf{x}$ denoting the inputs to the first of these layers. If one\nhypothesizes that multiple nonlinear layers can asymptoti-\ncally approximate complicated functions 2 , then it is equiv-\nalent to hypothesize that they can asymptotically approxi-\nmate the residual functions, i.e. , $\\mathcal{H}(\\mathbf{x}) - \\mathbf{x}$ (assuming that\nthe input and output are of the same dimensions). So\nrather than expect stacked layers to approximate $\\mathcal{H}(\\mathbf{x})$ , we\nexplicitly let these layers approximate a residual function\n$\\mathcal{F}(\\mathbf{x}):=\\mathcal{H}(\\mathbf{x})-\\mathbf{x}$ . The original function thus becomes\n$\\mathcal{F}(\\mathbf{x})+\\mathbf{x}$ . Although both forms should be able to asymptot-\nically approximate the desired functions (as hypothesized),\nthe case of learning might be different.",
          "reading_order": 3
        },
        {
          "label": "para",
          "bbox": [
            51,
            356,
            329,
            502
          ],
          "text": "This reformulation is motivated by the counterintuitive\nphenomena about the degradation problem (Fig. 1 , left). As\nwe discussed in the introduction, if the added layers can\nbe constructed as identity mappings, a deeper model should\nhave training error no greater than its shallower counter-\npart. The degradation problem suggests that the solvers\nmight have difficulties in approximating identity mappings\nby multiple nonlinear layers. With the residual learning re-\nformulation, if identity mappings are optimal, the solvers\nmay simply drive the weights of the multiple nonlinear lay-\ners toward zero to approach identity mappings.",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            51,
            502,
            329,
            627
          ],
          "text": "In real cases, it is unlikely that identity mappings are op-\ntimal, but our reformulation may help to precondition the\nproblem. If the optimal function is closer to an identity\nmapping than to a zero mapping, it should be easier for the\nsolver to find the perturbations with reference to an identity\nmapping, than to learn the function as a new one. We show\nby experiments (Fig. 7 ) that the learned residual functions in\ngeneral have small responses, suggesting that identity map-\npings provide reasonable preconditioning.",
          "reading_order": 5
        },
        {
          "label": "sub_sec",
          "bbox": [
            51,
            636,
            242,
            647
          ],
          "text": "3.2. Identity Mapping by Shortcuts",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            51,
            654,
            329,
            725
          ],
          "text": "We adopt residual learning to every few stacked layers.\nA building block is shown in Fig. 2 . Formally, in this paper\nwe consider a building block defined as:\n\\[\n    \\mathbf{y}=\\mathcal{F}(\\mathbf{x},\\left\\{W_i\\right\\})+\\mathbf{x}.\n\\eqno(1)\n\\]",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            51,
            734,
            329,
            788
          ],
          "text": "Here $\\mathbf{x}$ and $\\mathbf{y}$ are the input and output vectors of the lay-\ners considered. The function $\\mathcal{F}(\\mathbf{x},\\{W_i\\})$ represents the\nresidual mapping to be learned. For the example in Fig. 2\nthat has two layers, $\\mathcal{F}=W_2\\sigma(W_1\\mathbf{x})$ in which $\\sigma$ denotes",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            347,
            80,
            616,
            135
          ],
          "text": "ReLU [29] and the biases are omitted for simplifying no-\ntations. The operation $\\mathcal{F}+\\mathbf{x}$ is performed by a shortcut\nconnection and element-wise addition. We adopt the sec-\nond nonlinearity after the addition ( i.e., $\\sigma(\\mathbf{y})$ , see Fig. 2 ).",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            347,
            135,
            616,
            232
          ],
          "text": "The shortcut connections in Eqn.( 1 ) introduce neither ex-\ntra parameter nor computation complexity. This is not only\nattractive in practice but also important in our comparisons\nbetween plain and residual networks. We can fairly com-\npare plain/residual networks that simultaneously have the\nsame number of parameters, depth, width, and computa-\ntional cost (except for the negligible element-wise addition).",
          "reading_order": 10
        },
        {
          "label": "para",
          "bbox": [
            347,
            232,
            616,
            313
          ],
          "text": "The dimensions of $\\mathbf{x}$ and $\\mathcal{F}$ must be equal in Eqn.( 1 ).\nIf this is not the case ( e.g. , when changing the input/output\nchannels), we can perform a linear projection $W_s$ by the\nshortcut connections to match the dimensions:\n$$\\mathbf{y}=\\mathcal{F}(\\mathbf{x},\\left\\{W_i\\right\\})+W_s\\mathbf{x}.\\eqno(2)$$",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            347,
            322,
            616,
            376
          ],
          "text": "We can also use a square matrix $W_s$ in Eqn.(1). But we will\nshow by experiments that the identity mapping is sufficient\nfor addressing the degradation problem and is economical,\nand thus $W_s$ is only used when matching dimensions.",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            347,
            376,
            617,
            444
          ],
          "text": "The form of the residual function $\\mathcal{F}$ is flexible. Exper-\niments in this paper involve a function $\\mathcal{F}$ that has two or\nthree layers (Fig. 5 ), while more layers are possible. But if\n$\\mathcal{F}$ has only a single layer, Eqn.( 1 ) is similar to a linear layer:\n$\\boldsymbol{y}=W_1\\mathbf{x}+\\mathbf{x}$ , for which we have not observed advantages.",
          "reading_order": 13
        },
        {
          "label": "para",
          "bbox": [
            347,
            448,
            616,
            512
          ],
          "text": "We also note that although the above notations are about\nfully-connected layers for simplicity, they are applicable to\nconvolutional layers. The function $\\mathcal{F}(\\mathbf{x}_t, \\left(W_i\\right))$ can repre-\nsent multiple convolutional layers. The element-wise addi-\ntion is performed on two feature maps, channel by channel,",
          "reading_order": 14
        },
        {
          "label": "sub_sec",
          "bbox": [
            347,
            519,
            492,
            537
          ],
          "text": "3.3. Network Architectures",
          "reading_order": 15
        },
        {
          "label": "para",
          "bbox": [
            347,
            545,
            616,
            583
          ],
          "text": "We have tested various plain/residual nets, and have ob-\nserved consistent phenomena. To provide instances for dis-\ncussion, we describe two models for ImageNet as follows.",
          "reading_order": 16
        },
        {
          "label": "para",
          "bbox": [
            347,
            591,
            617,
            752
          ],
          "text": "Plain Network. Our plain baselines (Fig. 3 , middle) are\nmainly inspired by the philosophy of VGG nets [40] (Fig. 3 ,\nleft). The convolutional layers mostly have $3\\times3$ filters and\nfollow two simple design rules: (i) for the same output\nfeature map size, the layers have the same number of fil-\nters; and (ii) if the feature map size is halved, the num-\nber of filters is doubled so as to preserve the time com-\nplexity per layer. We perform downsampling directly by\nconvolutional layers that have a stride of 2. The network\nends with a global average pooling layer and a 1000-way\nfully-connected layer with softmax. The total number of\nweighted layers is 34 in Fig. 3 (middle).",
          "reading_order": 17
        },
        {
          "label": "para",
          "bbox": [
            347,
            752,
            616,
            806
          ],
          "text": "It is worth noticing that our model has fewer filters and\nlower complexity than VGG nets [40] (Fig. 3 , left). Our 34-\nlayer baseline has 3.6 billion FLOPs (multiply-adds), which\nis only 18 % of VGG-19 (19.6 billion FLOPs).",
          "reading_order": 18
        },
        {
          "label": "fnote",
          "bbox": [
            69,
            796,
            293,
            806
          ],
          "text": "$^{2}$ This hypothesis, however, is still an open question. See [28] .",
          "reading_order": 19
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "723",
          "reading_order": 20
        }
      ]
    },
    {
      "page_number": 4,
      "elements": [
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_004_figure_000.png)",
          "figure_path": "figures/page_6_page_004_figure_000.png",
          "bbox": [
            51,
            80,
            329,
            707
          ],
          "reading_order": 0
        },
        {
          "label": "cap",
          "bbox": [
            51,
            716,
            329,
            788
          ],
          "text": "Figure 3. Example network architectures for ImageNet. Left : the\nVGG-19 model [40] (19.6 billion FLOPs) as a reference. Mid-\ndle : a plain network with 34 parameter layers (3.6 billion FLOPs).\nRight : a residual network with 34 parameter layers (3.6 billion\nFLOPs). The dotted shortcuts increase dimensions. Table I shows\nmore details and other variants.",
          "reading_order": 1
        },
        {
          "label": "para",
          "bbox": [
            347,
            80,
            616,
            259
          ],
          "text": "Residual Network. Based on the above plain network, we\ninsert shortcut connections (Fig. 3 , right) which turn the\nnetwork into its counterpart residual version. The identity\nshortcuts (Eqn.(1)) can be directly used when the input and\noutput are of the same dimensions (solid line shortcuts in\nFig. 3 ). When the dimensions increase (dotted line shortcuts\nin Fig. 3 ), we consider two options: (A) The shortcut still\nperforms identity mapping, with extra zero entries padded\nfor increasing dimensions. This option introduces no extra\nparameter; (B) The projection shortcut in Eqn.(2) is used to\nmatch dimensions (done by $1\\times1$ convolutions). For both\noptions, when the shortcuts go across feature maps of two\nsizes, they are performed with a stride of 2.",
          "reading_order": 2
        },
        {
          "label": "sub_sec",
          "bbox": [
            347,
            268,
            455,
            279
          ],
          "text": "3.4. Implementation",
          "reading_order": 3
        },
        {
          "label": "para",
          "bbox": [
            347,
            286,
            616,
            475
          ],
          "text": "Our implementation for ImageNet follows the practice\nin [21, 40] . The image is resized with its shorter side ran-\ndomly sampled in $\\left[256,480\\right]$ for scale augmentation [40] .\nA 224 $\\times$ 224 crop is randomly sampled from an image or its\nhorizontal flip, with the per-pixel mean subtracted [21] . The\nstandard color augmentation in [21] is used. We adopt batch\nnormalization (BN) [16] right after each convolution and\nbefore activation, following [16] . We initialize the weights\nas in [12] and train all plain/residual nets from scratch. We\nuse SGD with a mini-batch size of 256. The learning rate\nstarts from 0.1 and is divided by 10 when the error plateaus,\nand the models are trained for up to $60\\times10^{4}$ iterations. We\nuse a weight decay of 0.0001 and a momentum of 0.9. We\ndo not use dropout [13] , following the practice in [16] .",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            347,
            475,
            616,
            542
          ],
          "text": "In testing, for comparison studies we adopt the standard\n10-crop testing [21] . For best results, we adopt the fully-\nconvolutional form as in [40, 12] , and average the scores\nat multiple scales (images are resized such that the shorter\nside is in $\\{224, 256, 384, 480, 640\\}$ ).",
          "reading_order": 5
        },
        {
          "label": "sec",
          "bbox": [
            347,
            555,
            436,
            570
          ],
          "text": "4. Experiments",
          "reading_order": 6
        },
        {
          "label": "sub_sec",
          "bbox": [
            347,
            573,
            499,
            591
          ],
          "text": "4.1. ImageNet Classification",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            347,
            600,
            616,
            680
          ],
          "text": "We evaluate our method on the ImageNet 2012 classifi-\ncation dataset [35] that consists of 1000 classes. The models\nare trained on the 1.28 million training images, and evalu-\nated on the 50k validation images. We also obtain a final\nresult on the 100k test images, reported by the test server.\nWe evaluate both top-1 and top-5 error rates.",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            347,
            680,
            616,
            737
          ],
          "text": "Plain Networks. We first evaluate 18-layer and 34-layer\nplain nets. The 34-layer plain net is in Fig. 3 (middle). The\n18-layer plain net is of a similar form. See Table 1 for de-\ntailed architectures.",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            347,
            737,
            616,
            806
          ],
          "text": "The results in Table 2 show that the deeper 34-layer plain\nnet has higher validation error than the shallower 18-layer\nplain net. To reveal the reasons, in Fig. 4 (left) we com-\npare their training/validation errors during the training pro-\ncedure. We have observed the degradation problem - the",
          "reading_order": 10
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "1/23",
          "reading_order": 11
        }
      ]
    },
    {
      "page_number": 5,
      "elements": [
        {
          "label": "tab",
          "bbox": [
            140,
            71,
            535,
            250
          ],
          "text": "<table><tr><td rowspan=\"2\">layer name conv1</td><td rowspan=\"2\">output size  112 × 112</td><td colspan=\"3\">18-layer</td><td colspan=\"3\">50-layer</td><td colspan=\"3\">101-layer</td><td colspan=\"3\">152-layer</td></tr><tr><td></td><td></td><td></td><td></td><td>7 v7, 64, stride 2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>conv2_x</td><td>56×56</td><td>[3 x3, 64][3 x3, 64]</td><td>×2</td><td>[3 x3, 64][3 x3, 64]</td><td>×3</td><td>[3 x3, 64][3 x3, 156]</td><td>×3</td><td>[3 x3, 64][3 x3, 156]</td><td>×3</td><td>[3 x3, 64][3 x3, 156]</td><td>×3</td><td>[3 x3, 64][3 x3, 156]</td><td>×3</td></tr><tr><td>conv3_x</td><td>28×28</td><td>[3 x3, 128][3 x3, 128]</td><td>×2</td><td>[3 x3, 128][3 x3, 128]</td><td>×4</td><td>[3 x3, 128][3 x3, 128]</td><td>×4</td><td>[3 x3, 128][3 x3, 152]</td><td>×4</td><td>[3 x3, 128][3 x3, 152]</td><td>×4</td><td>[3 x3, 128][3 x3, 152]</td><td>×8</td></tr><tr><td>conv4_x</td><td>14 ×14</td><td>[3 x3, 296][3 x3, 296</td><td>×2</td><td>[3 x3, 296][3 x3, 296]</td><td>×6</td><td>[3 x3, 296][3 x3, 128]</td><td>×6</td><td>[3 x3, 296][3 x3, 128]</td><td>×6</td><td>[3 x3, 296][3 x3, 128]</td><td>×23</td><td>[3 x3, 296][3 x3, 1024]</td><td>×36</td></tr><tr><td>conv5_x</td><td>7 ×7</td><td>[3 x3, 512][3 x3, 512]</td><td>×2</td><td>[3 x3, 512][3 x3, 512]</td><td>×3</td><td>[3 x3, 512][3 x3, 512]</td><td>×3</td><td>[3 x3, 512][3 x3, 128]</td><td>×3</td><td>[3 x3, 512][3 x3, 2048</td><td>×3</td><td>[3 x3, 512][3 x3, 1048]</td><td>×3</td></tr><tr><td></td><td>1 × 1</td><td></td><td></td><td></td><td></td><td colspan=\"9\">average pool, 1000-d fe, softmax</td></tr><tr><td colspan=\"2\">FLOPs</td><td colspan=\"3\">1.8 × 10 5</td><td colspan=\"3\">3.6 × 10 6</td><td colspan=\"3\">7.6 × 10 6</td><td colspan=\"3\">11.3 × 10 6</td></tr></table>",
          "reading_order": 0
        },
        {
          "label": "cap",
          "bbox": [
            51,
            250,
            616,
            277
          ],
          "text": "Table 1. Architectures for ImageNet. Building blocks are shown in brackets (see also Fig. 5), with the numbers of blocks stacked. Down-\nsampling is performed by conv3 _ 1, conv4 _ 1, and conv5 _ 1 with a stride of 2.",
          "reading_order": 1
        },
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_005_figure_002.png)",
          "figure_path": "figures/page_6_page_005_figure_002.png",
          "bbox": [
            96,
            277,
            579,
            439
          ],
          "reading_order": 2
        },
        {
          "label": "cap",
          "bbox": [
            51,
            439,
            616,
            478
          ],
          "text": "Figure 4. Training on ImageNet. Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain\nnetworks of 18 and 34 layers. Right: ResNets of 18 and 34 layers. In this plot, the residual networks have no extra parameter compared to\ntheir plain counterparts.",
          "reading_order": 3
        },
        {
          "label": "tab",
          "bbox": [
            105,
            500,
            275,
            546
          ],
          "text": "<table><tr><td></td><td>plain</td><td>ResNet</td></tr><tr><td>18 layers</td><td>27.94</td><td>27.88</td></tr><tr><td>34 layers</td><td>28.54</td><td>25.03</td></tr></table>",
          "reading_order": 4
        },
        {
          "label": "cap",
          "bbox": [
            51,
            546,
            329,
            584
          ],
          "text": "Table 2. Top-1 error ( % , 10-crop testing) on ImageNet validation.\nHere the ResNets have no extra parameter compared to their plain\ncounterparts. Fig. 4 shows the training procedures.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            51,
            617,
            329,
            666
          ],
          "text": "34-layer plain net has higher training error throughout the\nwhole training procedure, even though the solution space\nof the 18-layer plain network is a subspace of that of the\n34-layer one.",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            51,
            672,
            329,
            806
          ],
          "text": "We argue that this optimization difficulty is unlikely to\nbe caused by vanishing gradients. These plain networks are\ntrained with BN [16] , which ensures forward propagated\nsignals to have non-zero variances. We also verify that the\nbackward propagated gradients exhibit healthy norms with\nBN. So neither forward nor backward signals vanish. In\nfact, the 34-layer plain net is still able to achieve compet-\nitive accuracy (Table 3 ), suggesting that the solver works\nto some extent. We conjecture that the deep plain nets may\nhave exponentially low convergence rates, which impact the",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            347,
            501,
            616,
            528
          ],
          "text": "reducing of the training error ${ }^{3}$. The reason for such opti-\nmization difficulties will be studied in the future.",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            347,
            537,
            616,
            645
          ],
          "text": "Next Networks. Next we evaluate 18-layer and 34-\nlayer residual nets ( ResNets ). The baseline architectures\nare the same as the above plain nets, expect that a shortcut\nconnection is added to each pair of 3 $\\times$ 3 filters as in Fig. 3\n(right). In the first comparison (Table 2 and Fig. 4 right),\nwe use identity mapping for all shortcuts and zero-padding\nfor increasing dimensions (option A). So they have no extra\nparameter compared to the plain counterparts.",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            347,
            645,
            616,
            752
          ],
          "text": "We have three major observations from Table 2 and\nFig. 4 . First, the situation is reversed with residual learn-\ning – the 34-layer ResNet is better than the 18-layer ResNet\n(by $2.8\\%$ ). More importantly, the 34-layer ResNet exhibits\nconsiderably lower training error and is generalizable to the\nvalidation data. This indicates that the degradation problem\nis well addressed in this setting and we manage to obtain\naccuracy gains from increased depth.",
          "reading_order": 10
        },
        {
          "label": "para",
          "bbox": [
            355,
            752,
            615,
            765
          ],
          "text": "Second, compared to its plain counterpart, the 34-layer",
          "reading_order": 11
        },
        {
          "label": "fnote",
          "bbox": [
            347,
            770,
            616,
            806
          ],
          "text": "${ }^{3}$ We have experimented with more training iterations $(3 \\times)$ and still ob-\nserved the degradation problem, suggesting that this problem cannot be\nfeasibly addressed by simply using more iterations.",
          "reading_order": 12
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "074",
          "reading_order": 13
        }
      ]
    },
    {
      "page_number": 6,
      "elements": [
        {
          "label": "tab",
          "bbox": [
            96,
            71,
            284,
            241
          ],
          "text": "<table><tr><td>model</td><td>top-1 err.</td><td>top-5 err.</td></tr><tr><td>VGG-16 [40]</td><td>28.07</td><td>9.33</td></tr><tr><td>GoogLeNet [43]</td><td>-</td><td>9.15</td></tr><tr><td>PReLU-net [12]</td><td>24.27</td><td>7.38</td></tr><tr><td>plain-34</td><td>28.54</td><td>10.02</td></tr><tr><td>ResNet-34 A</td><td>25.03</td><td>7.76</td></tr><tr><td>ResNet-34 B</td><td>24.52</td><td>7.46</td></tr><tr><td>ResNet-34 C</td><td>24.19</td><td>7.40</td></tr><tr><td>ResNet-50</td><td>22.85</td><td>6.71</td></tr><tr><td>ResNet-101</td><td>21.75</td><td>6.05</td></tr><tr><td>ResNet-152</td><td>21.43</td><td>5.71</td></tr></table>",
          "reading_order": 0
        },
        {
          "label": "cap",
          "bbox": [
            51,
            241,
            329,
            277
          ],
          "text": "Table 3. Error rates ( % , 10-crop testing) on ImageNet validation.\nVGG-16 is based on our test. ResNet-50/101/152 are of option B\nthat only uses projections for increasing dimensions.",
          "reading_order": 1
        },
        {
          "label": "tab",
          "bbox": [
            69,
            286,
            320,
            457
          ],
          "text": "<table><tr><td>method</td><td>top-1 err.</td><td>top-5 err.</td></tr><tr><td>VGG [40] (ILSVRC*14)</td><td>-</td><td>8.43†</td></tr><tr><td>GoogLeNet [43] (ILSVRC*14)</td><td>-</td><td>7.89</td></tr><tr><td>VGG [40] (v5)</td><td>24.4</td><td>7.1</td></tr><tr><td>PReLU-net [12]</td><td>21.59</td><td>5.71</td></tr><tr><td>BN-inception [16]</td><td>21.99</td><td>5.81</td></tr><tr><td>ResNet-34 B</td><td>21.84</td><td>5.71</td></tr><tr><td>ResNet-34 C</td><td>21.53</td><td>5.60</td></tr><tr><td>ResNet-50</td><td>20.74</td><td>5.25</td></tr><tr><td>ResNet-101</td><td>19.87</td><td>4.60</td></tr><tr><td>ResNet-152</td><td>19.38</td><td>4.49</td></tr></table>",
          "reading_order": 2
        },
        {
          "label": "cap",
          "bbox": [
            51,
            457,
            329,
            469
          ],
          "text": "validation set (except ${ }^{\\dagger}$ reported on the test set).",
          "reading_order": 3
        },
        {
          "label": "tab",
          "bbox": [
            69,
            474,
            320,
            582
          ],
          "text": "<table><tr><td>method</td><td>top-5 err. (test)</td></tr><tr><td>VGG [40] (ILSVRC’14)</td><td>7.32</td></tr><tr><td>GoogLeNet [43] (ILSVRC’14)</td><td>6.66</td></tr><tr><td>VGG [40] (v5)</td><td>6.8</td></tr><tr><td>PReLU-net [12]</td><td>4.94</td></tr><tr><td>BN-inception [16]</td><td>4.82</td></tr><tr><td>ResNet (ILSVRC’15)</td><td>3.57</td></tr></table>",
          "reading_order": 4
        },
        {
          "label": "cap",
          "bbox": [
            51,
            582,
            329,
            609
          ],
          "text": "Table 5. Error rates ( % ) of ensembles . The top-5 error is on the\ntest set of ImageNet and reported by the test server.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            51,
            636,
            329,
            689
          ],
          "text": "ResNet reduces the top-1 error by 3.5 % (Table 2), resulting\nfrom the successfully reduced training error (Fig. 4 right vs.\nleft). This comparison verifies the effectiveness of residual\nlearning on extremely deep systems.",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            51,
            689,
            329,
            788
          ],
          "text": "Last, we also note that the 18-layer plain/residual nets\nare comparably accurate (Table 2 ), but the 18-layer ResNet\nconverges faster (Fig. 4 right vs. left). When the net is \"not\noverly deep\" (18 layers here), the current SGD solver is still\nable to find good solutions to the plain net. In this case, the\nResNet eases the optimization by providing faster conver-\ngence at the early stage.",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            51,
            795,
            329,
            806
          ],
          "text": "Identity vs. Projection Shortcuts. We have shown that",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            347,
            232,
            616,
            324
          ],
          "text": "parameter-free, identity shortcuts help with training. Next\nwe investigate projection shortcuts (Eqn.(2)). In Table 3 we\ncompare three options: (A) zero-padding shortcuts are used\nfor increasing dimensions, and all shortcuts are parameter-\nfree (the same as Table 2 and Fig. 4 right); (B) projec-\ntion shortcuts are used for increasing dimensions, and other\nshortcuts are identity; and (C) all shortcuts are projections.",
          "reading_order": 9
        },
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_006_figure_010.png)",
          "figure_path": "figures/page_6_page_006_figure_010.png",
          "bbox": [
            373,
            71,
            606,
            161
          ],
          "reading_order": 10
        },
        {
          "label": "cap",
          "bbox": [
            347,
            177,
            616,
            215
          ],
          "text": "Figure 5. A deeper residual function $\\mathcal{F}$ for ImageNet. Left: a\nbuilding block (on 56 $\\times$ 56 feature maps) as in Fig. 3 for ResNet-\n34. Right: a “ bottleneck\" building block for ResNet-50/101/152.",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            347,
            329,
            616,
            485
          ],
          "text": "Table 3 shows that all three options are considerably bet-\nter than the plain counterpart. B is slightly better than A. We\nargue that this is because the zero-padded dimensions in A\nindeed have no residual learning. C is marginally better than\nB, and we attribute this to the extra parameters introduced\nby many (thirteen) projection shortcuts. But the small dif-\nferences among A/B/C indicate that projection shortcuts are\nnot essential for addressing the degradation problem. So we\ndo not use option C in the rest of this paper, to reduce mem-\nory/time complexity and model sizes. Identity shortcuts are\nparticularly important for not increasing the complexity of\nthe bottleneck architectures that are introduced below.",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            347,
            492,
            616,
            630
          ],
          "text": "Deeper Bottleneck Architectures. Next we describe our\ndeeper nets for ImageNet. Because of concerns on the train-\ning time that we can afford, we modify the building block\nas a bottleneck design $^4$ . For each residual function $\\mathcal{F}$ , we\nuse a stack of 3 layers instead of 2 (Fig. 5 ). The three layers\nare 1 $\\times$ 1, 3 $\\times$ 3, and 1 $\\times$ 1 convolutions, where the 1 $\\times$ 1 layers\nare responsible for reducing and then increasing (restoring)\ndimensions, leaving the 3 $\\times$ 3 layer a bottleneck with smaller\ninput/output dimensions. Fig. 5 shows an example, where\nboth designs have similar time complexity.",
          "reading_order": 13
        },
        {
          "label": "para",
          "bbox": [
            347,
            633,
            616,
            726
          ],
          "text": "The parameter-free identity shortcuts are particularly im-\nportant for the bottleneck architectures. If the identity short-\ncut in Fig. 5 (right) is replaced with projection, one can\nshow that the time complexity and model size are doubled,\nas the shortcut is connected to the two high-dimensional\nends. So identity shortcuts lead to more efficient models\nfor the bottleneck designs.",
          "reading_order": 14
        },
        {
          "label": "para",
          "bbox": [
            355,
            726,
            616,
            743
          ],
          "text": "50-layer ResNet: We replace each 2-layer block in the",
          "reading_order": 15
        },
        {
          "label": "fnote",
          "bbox": [
            347,
            752,
            616,
            806
          ],
          "text": "$^{4}$ Deeper now-bottleneck ResNets ( e.g., Fig. 5 left) also gain accuracy\nfrom increased depth (as shown on CIFAR-10), but are not as economical\nas the bottleneck ResNets. So the usage of bottleneck designs is mainly due\nto practical considerations. We further note that the degradation problem\nof plain nets is also witnessed for the bottleneck designs.",
          "reading_order": 16
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "725",
          "reading_order": 17
        }
      ]
    },
    {
      "page_number": 7,
      "elements": [
        {
          "label": "para",
          "bbox": [
            51,
            80,
            329,
            125
          ],
          "text": "34-layer net with this 3-layer bottleneck block, resulting in\na 50-layer ResNet (Table 1). We use option B for increasing\ndimensions. This model has 3.8 billion FLOPs.",
          "reading_order": 0
        },
        {
          "label": "para",
          "bbox": [
            51,
            125,
            329,
            206
          ],
          "text": "101-layer and 152-layer ResNets: We construct 101-\nlayer and 152-layer ResNets by using more 3-layer blocks\n(Table 1 ). Remarkably, although the depth is significantly\nincreased, the 152-layer ResNet (11.3 billion FLOPs) still\nhas lower complexity than VGG-16/19 nets (15.3/19.6 bil-\nlion FLOPs).",
          "reading_order": 1
        },
        {
          "label": "para",
          "bbox": [
            51,
            206,
            329,
            286
          ],
          "text": "The 50/101/152-layer ResNets are more accurate than\nthe 34-layer ones by considerable margins (Table 3 and 4).\nWe do not observe the degradation problem and thus en-\njoy significant accuracy gains from considerably increased\ndepth. The benefits of depth are witnessed for all evaluation\nmetrics (Table 3 and 4).",
          "reading_order": 2
        },
        {
          "label": "para",
          "bbox": [
            51,
            295,
            329,
            430
          ],
          "text": "Comparisons with State-of-the-art Methods. In Table 4\nwe compare with the previous best single-model results.\nOur baseline 34-layer ResNets have achieved very compet-\nitive accuracy. Our 152-layer ResNet has a single-model\ntop-5 validation error of 4.49 % . This single-model result\noutperforms all previous ensemble results (Table 5 ). We\ncombine six models of different depth to form an ensemble\n(only with two 152-layer ones at the time of submitting).\nThis leads to 3.57 % top-5 error on the test set (Table 5 ).\nThis entry won the 1st place in ILSVRC 2015 .",
          "reading_order": 3
        },
        {
          "label": "sub_sec",
          "bbox": [
            51,
            439,
            204,
            450
          ],
          "text": "4.2. CIFAR-10 and Analysis",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            51,
            456,
            329,
            555
          ],
          "text": "We conducted more studies on the CIFAR-10 dataset\n[20] , which consists of 50k training images and 10k test-\ning images in 10 classes. We present experiments trained\non the training set and evaluated on the test set. Our focus\nis on the behaviors of extremely deep networks, but not on\npushing the state-of-the-art results, so we intentionally use\nsimple architectures as follows.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            51,
            555,
            329,
            701
          ],
          "text": "The plain/residual architectures follow the form in Fig. 3\n(middle/right). The network inputs are $32\\times32$ images, with\nthe per-pixel mean subtracted. The first layer is $3\\times3$ convo-\nlutions. Then we use a stack of $6n$ layers with $3\\times3$ convo-\nlutions on the feature maps of sizes $\\{32,16,8\\}$ respectively,\nwith $2n$ layers for each feature map size. The numbers of\nfilters are $\\{16,32,64\\}$ respectively. The subsampling is per-\nformed by convolutions with a stride of 2. The network ends\nwith a global average pooling, a 10-way fully-connected\nlayer, and softmax. There are totally $6n+2$ stacked weighted\nlayers. The following table summarizes the architecture:",
          "reading_order": 6
        },
        {
          "label": "tab",
          "bbox": [
            78,
            716,
            302,
            761
          ],
          "text": "<table><tr><td>output map size</td><td>32×32</td><td>16×16</td><td>8×8</td></tr><tr><td># layers</td><td>1+2n</td><td>2n</td><td>2n</td></tr><tr><td># filters</td><td>16</td><td>32</td><td>64</td></tr></table>",
          "reading_order": 7
        },
        {
          "label": "cap",
          "bbox": [
            51,
            761,
            329,
            806
          ],
          "text": "When shortcut connections are used, they are connected\nto the pairs of 3 $\\times$ 3 layers (totally $3n$ shortcuts). On this\ndataset we use identity shortcuts in all cases ( i.e. , option A),",
          "reading_order": 8
        },
        {
          "label": "tab",
          "bbox": [
            347,
            80,
            615,
            277
          ],
          "text": "<table><tr><td colspan=\"3\">method Maxout [9] NIN [25] DSN [24]</td><td>error (%) 9.38 8.81 8.22</td></tr><tr><td rowspan=\"2\">FitNet [34]</td><td colspan=\"2\"># layers</td><td># params</td></tr><tr><td>19</td><td>2.5M</td><td>8.39</td></tr><tr><td>Highway [41, 42]</td><td>19</td><td>2.3M</td><td>7.54 (7.72±0.16)</td></tr><tr><td>Highway [41, 42]</td><td>32</td><td>1.25M</td><td>8.80</td></tr><tr><td>ResNet</td><td>20</td><td>0.27M</td><td>8.75</td></tr><tr><td>ResNet</td><td>32</td><td>0.46M</td><td>7.51</td></tr><tr><td>ResNet</td><td>44</td><td>0.66M</td><td>7.17</td></tr><tr><td>ResNet</td><td>56</td><td>0.85M</td><td>6.97</td></tr><tr><td>ResNet</td><td>110</td><td>1.7M</td><td>6.43 (6.61±0.16)</td></tr><tr><td>ResNet</td><td>1202</td><td>19.4M</td><td>7.93</td></tr></table>",
          "reading_order": 9
        },
        {
          "label": "cap",
          "bbox": [
            347,
            286,
            616,
            322
          ],
          "text": "Table 6. Classification error on the CIFAR-10 test set. All meth-\nods are with data augmentation. For ResNet-110, we run it 5 times\nand show “ best (mean±std)\" as in [42] .",
          "reading_order": 10
        },
        {
          "label": "para",
          "bbox": [
            347,
            340,
            616,
            370
          ],
          "text": "so our residual models have exactly the same depth, width,\nand number of parameters as the plain counterparts.",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            347,
            370,
            616,
            519
          ],
          "text": "We use a weight decay of 0.0001 and momentum of 0.9,\nand adopt the weight initialization in [12] and BN [16] but\nwith no dropout. These models are trained with a mini-\nbatch size of 128 on two GPUs. We start with a learning\nrate of 0.1, divide it by 10 at 32k and 48k iterations, and\nterminate training at 64k iterations, which is determined on\na 45k/5k train/val split. We follow the simple data augmen-\ntation in [24] for training: 4 pixels are padded on each side,\nand a 32 $\\times$ 32 crop is randomly sampled from the padded\nimage or its horizontal flip. For testing, we only evaluate\nthe single view of the original 32 $\\times$ 32 image.",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            347,
            519,
            616,
            613
          ],
          "text": "We compare $n=\\{3,5,7,9\\}$ , leading to 20, 32, 44, and\n56-layer networks. Fig. 6 (left) shows the behaviors of the\nplain nets. The deep plain nets suffer from increased depth,\nand exhibit higher training error when going deeper. This\nphenomenon is similar to that on ImageNet (Fig. 4 , left) and\non MNIST (see [41] ), suggesting that such an optimization\ndifficulty is a fundamental problem.",
          "reading_order": 13
        },
        {
          "label": "para",
          "bbox": [
            347,
            616,
            616,
            667
          ],
          "text": "Fig. 6 (middle) shows the behaviors of ResNets. Also\nsimilar to the ImageNet cases (Fig. 4, right), our ResNets\nmanage to overcome the optimization difficulty and demon-\nstrate accuracy gains when the depth increases.",
          "reading_order": 14
        },
        {
          "label": "para",
          "bbox": [
            347,
            671,
            616,
            775
          ],
          "text": "We further explore $n=18$ that leads to a 110-layer\nResNet. In this case, we find that the initial learning rate\nof 0.1 is slightly too large to start converging $^5$ . So we use\n0.01 to warm up the training until the training error is below\n80 % (about 400 iterations), and then go back to 0.1 and con-\ntinue training. The rest of the learning schedule is as done\npreviously. This 110-layer network converges well (Fig. 6 ,\nmiddle). It has fewer parameters than other deep and thin",
          "reading_order": 15
        },
        {
          "label": "fnote",
          "bbox": [
            347,
            779,
            616,
            806
          ],
          "text": "${ }^{5}$ With an initial learning rate of 0.1 , it starts converging ( $<90 \\%$ error\nafter several epochs, but still reaches similar accuracy.",
          "reading_order": 16
        },
        {
          "label": "foot",
          "bbox": [
            338,
            824,
            355,
            842
          ],
          "text": "776",
          "reading_order": 17
        }
      ]
    },
    {
      "page_number": 8,
      "elements": [
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_008_figure_000.png)",
          "figure_path": "figures/page_6_page_008_figure_000.png",
          "bbox": [
            114,
            80,
            562,
            203
          ],
          "reading_order": 0
        },
        {
          "label": "cap",
          "bbox": [
            51,
            203,
            615,
            217
          ],
          "text": "of plain-110 is higher than 60% and not displayed. Middle: ResNets. Right: ResNets with 110 and 1202 layers.",
          "reading_order": 1
        },
        {
          "label": "fig",
          "text": "![Figure](figures/page_6_page_008_figure_002.png)",
          "figure_path": "figures/page_6_page_008_figure_002.png",
          "bbox": [
            69,
            232,
            311,
            370
          ],
          "reading_order": 2
        },
        {
          "label": "cap",
          "bbox": [
            51,
            370,
            329,
            421
          ],
          "text": "Figure 7. Standard deviations (std) of layer responses on CIFAR-\n10. The responses are the outputs of each $3\\times3$ layer, after BN and\nbefore nonlinearity. Top: the layers are shown in their original\norder. Bottom: the responses are ranked in descending order.",
          "reading_order": 3
        },
        {
          "label": "para",
          "bbox": [
            51,
            439,
            329,
            466
          ],
          "text": "networks such as FitNet [34] and Highway [41] (Table 6),\nyet is among the state-of-the-art results (6.43 % , Table 6).",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            51,
            474,
            329,
            664
          ],
          "text": "Analysis of Layer Responses. Fig. 7 shows the standard\ndeviations (std) of the layer responses. The responses are\nthe outputs of each 3×3 × 3 layer, after BN and before other\nnonlinearity (ReLU/addition). For ResNet s, this analy-\nsis reveals the response strength of the residual functions.\nFig. 7 shows that ResNets have generally smaller responses\nthan their plain counterparts. These results support our ba-\nsic motivation (Sec. 3.1 ) that the residual functions might\nbe generally closer to zero than the non-residual functions.\nWe also notice that the deeper ResNet has smaller magni-\ntudes of responses, as evidenced by the comparisons among\nResNet-20, 56, and 110 in Fig. 7 . When there are more\nlayers, an individual layer of ResNets tends to modify the\nsignal less.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            51,
            672,
            329,
            764
          ],
          "text": "Exploring Over 1000 layers. We explore an aggressively\ndeep model of over 1000 layers. We set $n=200$ that\nleads to a 1202-layer network, which is trained as described\nabove. Our method shows no optimization difficulty , and\nthis $10^3$ layer network is able to achieve training error\n< $0.1\\%$ (Fig. 6 , right). Its test error is still fairly good\n(7.93 % , Table 6 ).",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            51,
            769,
            329,
            806
          ],
          "text": "But there are still open problems on such aggressively\ndeep models. The testing result of this 1202-layer network\nis worse than that of our $110$ -layer network, although both",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            347,
            429,
            616,
            564
          ],
          "text": "have similar training error. We argue that this is because of\noverfitting, The 1202-layer network may be unnecessarily\nlarge (19.4M) for this small dataset. Strong regularization\nsuch as maxout [9] or dropout [13] is applied to obtain the\nbest results ([9, 25, 24, 34]) on this dataset. In this paper, we\nuse no maxout/dropout and just simply impose regulariza-\ntion via deep and thin architectures by design, without dis-\ntracting from the focus on the difficulties of optimization.\nBut combining with stronger regularization may improve\nresults, which we will study in the future.",
          "reading_order": 8
        },
        {
          "label": "tab",
          "bbox": [
            373,
            232,
            588,
            295
          ],
          "text": "<table><tr><td>training data</td><td>07+12</td><td>07++12</td></tr><tr><td>test data</td><td>VOC 07 test</td><td>VOC 12 test</td></tr><tr><td>VGG-16</td><td>73.2</td><td>70.4</td></tr><tr><td>ResNet-101</td><td>76.4</td><td>73.8</td></tr></table>",
          "reading_order": 9
        },
        {
          "label": "cap",
          "bbox": [
            347,
            295,
            616,
            334
          ],
          "text": "Table 7. Object detection mAP ( % ) on the PASCAL VOC\n2007/2012 test sets using baseline Faster R-CNN. See also ap-\npendix for better results.",
          "reading_order": 10
        },
        {
          "label": "tab",
          "bbox": [
            382,
            340,
            579,
            385
          ],
          "text": "<table><tr><td>metric</td><td>mAP@.5</td><td>mAP@[.5, .95]</td></tr><tr><td>VGG-16</td><td>41.5</td><td>21.2</td></tr><tr><td>ResNet-101</td><td>48.4</td><td>27.2</td></tr></table>",
          "reading_order": 11
        },
        {
          "label": "cap",
          "bbox": [
            347,
            385,
            616,
            412
          ],
          "text": "Table 8. Object detection mAP ( % ) on the COCO validation set\nusing baseline Faster R-CNN. See also appendix for better results.",
          "reading_order": 12
        },
        {
          "label": "sub_sec",
          "bbox": [
            347,
            572,
            608,
            583
          ],
          "text": "4.3. Object Detection on PASCAL and MS COCO",
          "reading_order": 13
        },
        {
          "label": "para",
          "bbox": [
            347,
            591,
            616,
            752
          ],
          "text": "Our method has good generalization performance on\nother recognition tasks. Table 7 and 8 show the object de-\ntection baseline results on PASCAL VOC 2007 and 2012\n[5] and COCO [26] . We adopt Faster R-CNN [32] as the de-\ntection method. Here we are interested in the improvements\nof replacing VGG-16 [40] with ResNet-101. The detection\nimplementation (see appendix) of using both models is the\nsame, so the gains can only be attributed to better networks.\nMost remarkably, on the challenging COCO dataset we ob-\ntain a 6.0 % increase in COCO's standard metric (mAP@ $\\lfloor$ 5,\n.95 $\\rfloor$ ), which is a 28 % relative improvement. This gain is\nsolely due to the learned representations.",
          "reading_order": 14
        },
        {
          "label": "para",
          "bbox": [
            347,
            752,
            616,
            806
          ],
          "text": "Based on deep residual nets, we won the 1st places in\nseveral tracks in ILSVRC & COCO 2015 competitions: Im-\nageNet detection, ImageNet localization, COCO detection,\nand COCO segmentation. The details are in the appendix.",
          "reading_order": 15
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "727",
          "reading_order": 16
        }
      ]
    },
    {
      "page_number": 9,
      "elements": [
        {
          "label": "sec",
          "bbox": [
            51,
            80,
            114,
            98
          ],
          "text": "Reference",
          "reading_order": 0
        },
        {
          "label": "para",
          "bbox": [
            60,
            104,
            329,
            134
          ],
          "text": "[1] Y. Bengio, P. Simard, and P Frasconi. Learning long-term dependen-\ncies with gradient descent is difficult. IEEE Transactions on Neural\nNetworks , 5(2):157–166, 1994.",
          "reading_order": 1
        },
        {
          "label": "para",
          "bbox": [
            60,
            134,
            329,
            169
          ],
          "text": "[2] C. M. Bishop. Neural networks for pattern recognition . Oxford\nuniversity press, 1995.\n[3] W. L. Briggs, S. F. McCormick, et al. A Multigrid Tutorial . Siam,",
          "reading_order": 2
        },
        {
          "label": "para",
          "bbox": [
            60,
            169,
            329,
            179
          ],
          "text": "2000.",
          "reading_order": 3
        },
        {
          "label": "para",
          "bbox": [
            60,
            179,
            329,
            215
          ],
          "text": "[4] K. Chatfield, V. Lempitsky, A. Vedaldi, and A. Zisserman. The devil\nis in the details: an evaluation of recent feature encoding methods.\nIn BMVC , 2011.",
          "reading_order": 4
        },
        {
          "label": "para",
          "bbox": [
            60,
            215,
            329,
            246
          ],
          "text": "[5] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zis-\nserman. The Pascal Visual Object Classes (VOC) Challenge. IJCV ,\npages 303–338, 2010.",
          "reading_order": 5
        },
        {
          "label": "para",
          "bbox": [
            60,
            249,
            230,
            259
          ],
          "text": "[6] R. Girshick. Fast R-CNN. In ICCV, 2015.",
          "reading_order": 6
        },
        {
          "label": "para",
          "bbox": [
            60,
            259,
            329,
            289
          ],
          "text": "[7] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hier-\narchies for accurate object detection and semantic segmentation. In\nCVPR , 2014.",
          "reading_order": 7
        },
        {
          "label": "para",
          "bbox": [
            60,
            294,
            329,
            314
          ],
          "text": "[8] X. Glorot and Y. Bengio. Understanding the difficulty of training\ndeep feedforward neural networks. In AISTATS , 2010.",
          "reading_order": 8
        },
        {
          "label": "para",
          "bbox": [
            60,
            314,
            329,
            334
          ],
          "text": "[9] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville, and\nY. Bengio, Maxcut networks, arXiv:1302.4389 , 2013.",
          "reading_order": 9
        },
        {
          "label": "para",
          "bbox": [
            51,
            339,
            329,
            358
          ],
          "text": "[10] K. He and J. Sun. Convolutional neural networks at constrained time\ncost. In CVPR , 2015.",
          "reading_order": 10
        },
        {
          "label": "para",
          "bbox": [
            51,
            358,
            329,
            393
          ],
          "text": "[11] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling in deep\nconvolutional networks for visual recognition. In ECCV , 2014.\n[12] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers:",
          "reading_order": 11
        },
        {
          "label": "para",
          "bbox": [
            51,
            393,
            329,
            413
          ],
          "text": "Surpassing human-level performance on imagenet classification. In\nICCV, 2015.",
          "reading_order": 12
        },
        {
          "label": "para",
          "bbox": [
            51,
            418,
            329,
            448
          ],
          "text": "[13] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\nR. R. Salakhutdinov. Improving neural networks by preventing co-\nadaptation of feature detectors. arXiv:1207.0580 , 2012.",
          "reading_order": 13
        },
        {
          "label": "para",
          "bbox": [
            51,
            448,
            329,
            482
          ],
          "text": "[14] S. Hochreiter. Untersuchungen zu dynamischen neuronalen netzen.\nDiploma thesis, TU Munich , 1991.\n[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural",
          "reading_order": 14
        },
        {
          "label": "para",
          "bbox": [
            51,
            482,
            329,
            493
          ],
          "text": "computation , 9(8):1735–1780, 1997.",
          "reading_order": 15
        },
        {
          "label": "para",
          "bbox": [
            51,
            493,
            329,
            514
          ],
          "text": "[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep\nnetwork training by reducing internal covariate shift. In ICML , 2015.",
          "reading_order": 16
        },
        {
          "label": "para",
          "bbox": [
            51,
            518,
            329,
            538
          ],
          "text": "[17] H. Jegou, M. Douze, and C. Schmid. Product quantization for nearest\nneighbor search. TPAMI , 33, 2011.",
          "reading_order": 17
        },
        {
          "label": "para",
          "bbox": [
            51,
            538,
            329,
            573
          ],
          "text": "[18] H. Jegou, F. Perronnin, M. Douze, J. Sanchez, P. Perez, and\nC. Schmid. Aggregating local image descriptors into compact codes.\nTPAMI , 2012.",
          "reading_order": 18
        },
        {
          "label": "para",
          "bbox": [
            51,
            573,
            329,
            603
          ],
          "text": "[19] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,\nS. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for\nfast feature embedding. arXiv:1408.5093 , 2014.",
          "reading_order": 19
        },
        {
          "label": "para",
          "bbox": [
            51,
            607,
            329,
            627
          ],
          "text": "[20] A. Krizhevsky. Learning multiple layers of features from tiny im-\nages. Tech Report , 2009.",
          "reading_order": 20
        },
        {
          "label": "para",
          "bbox": [
            51,
            627,
            329,
            650
          ],
          "text": "[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classification\nwith deep convolutional neural networks. In NIPS , 2012.",
          "reading_order": 21
        },
        {
          "label": "para",
          "bbox": [
            51,
            653,
            329,
            683
          ],
          "text": "[22] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,\nW. Hubbard, and L. D. Jackel. Backpropagation applied to hand-\nwritten zip code recognition. Neural computation , 1989.",
          "reading_order": 22
        },
        {
          "label": "para",
          "bbox": [
            51,
            686,
            329,
            707
          ],
          "text": "[23] Y. LeCun, L. Bottou, G. B. Orr, and K.-R. Müller. Efficient backprop.\nIn Neural Networks: Tricks of the Trade , pages 9–50. Springer, 1998.",
          "reading_order": 23
        },
        {
          "label": "para",
          "bbox": [
            51,
            707,
            329,
            728
          ],
          "text": "[24] C.-Y. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply-\nsupervised nets. arXiv:1409.5185 , 2014.",
          "reading_order": 24
        },
        {
          "label": "para",
          "bbox": [
            51,
            728,
            329,
            752
          ],
          "text": "[25] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv:1312.4400 ,\n2013.",
          "reading_order": 25
        },
        {
          "label": "para",
          "bbox": [
            51,
            752,
            329,
            782
          ],
          "text": "[26] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,\nP. Dollár, and C. L. Zitnick. Microsoft COCO: Common objects in\ncontext. In ECCV , 2014.",
          "reading_order": 26
        },
        {
          "label": "para",
          "bbox": [
            51,
            787,
            329,
            806
          ],
          "text": "[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks\nfor semantic segmentation. In CVPR , 2015.",
          "reading_order": 27
        },
        {
          "label": "para",
          "bbox": [
            347,
            80,
            616,
            107
          ],
          "text": "[28] G. Monttifar, R. Pascanu, K. Cho, and Y. Bengio. On the number of\nlinear regions of deep neural networks. In NIPS , 2014.",
          "reading_order": 28
        },
        {
          "label": "para",
          "bbox": [
            347,
            107,
            616,
            126
          ],
          "text": "[29] V. Nair and G. E. Hinton. Rectified linear units improve restricted\nboltzmann machines. In ICML , 2010.",
          "reading_order": 29
        },
        {
          "label": "para",
          "bbox": [
            347,
            131,
            615,
            152
          ],
          "text": "[30] F. Perronnin and C. Dance. Fisher kernels on visual vocabularies for\nimage categorization. In CVPR , 2007.",
          "reading_order": 30
        },
        {
          "label": "para",
          "bbox": [
            347,
            152,
            615,
            173
          ],
          "text": "[31] T. Raiko, H. Valpola, and Y. LeCun. Deep learning made easier by\nlinear transformations in perceptrons. In AISTATS , 2012.",
          "reading_order": 31
        },
        {
          "label": "para",
          "bbox": [
            347,
            176,
            616,
            206
          ],
          "text": "[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards\nreal-time object detection with region proposal networks. In NIPS ,\n2015.",
          "reading_order": 32
        },
        {
          "label": "para",
          "bbox": [
            347,
            206,
            616,
            232
          ],
          "text": "[33] B. D. Ripley. Pattern recognition and neural networks . Cambridge\nuniversity press, 1996.",
          "reading_order": 33
        },
        {
          "label": "para",
          "bbox": [
            347,
            232,
            616,
            251
          ],
          "text": "[34] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta, and\nY. Bengio. Fitnets: Hints for thin deep nets. In ICLR , 2015.",
          "reading_order": 34
        },
        {
          "label": "para",
          "bbox": [
            347,
            251,
            616,
            286
          ],
          "text": "[35] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,\nZ. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al. Imagenet:\nlarge scale visual recognition challenge. arXiv:1409.0575 , 2014.",
          "reading_order": 35
        },
        {
          "label": "para",
          "bbox": [
            347,
            286,
            616,
            316
          ],
          "text": "[36] A. M. Saxe, J. L. McClelland, and S. Ganguli. Exact solutions to\nthe nonlinear dynamics of learning in deep linear neural networks.\narXiv:1212.6120 , 2013.",
          "reading_order": 36
        },
        {
          "label": "para",
          "bbox": [
            347,
            321,
            616,
            340
          ],
          "text": "[37] N. N. Schraudolph. Accelerated gradient descent by factor-centering\ndecomposition. Technical report, 1998.",
          "reading_order": 37
        },
        {
          "label": "para",
          "bbox": [
            347,
            340,
            616,
            376
          ],
          "text": "[38] N. N. Schraudolph. Centering neural network gradient factors. In\nNeural Networks: Tricks of the Trade , pages 207–226. Springer,\n1998.",
          "reading_order": 38
        },
        {
          "label": "para",
          "bbox": [
            347,
            376,
            616,
            405
          ],
          "text": "[39] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. Le-\nCun. Overfeat: Integrated recognition, localization and detection\nusing convolutional networks. In ICLR , 2014.",
          "reading_order": 39
        },
        {
          "label": "para",
          "bbox": [
            347,
            410,
            616,
            430
          ],
          "text": "[40] K. Simonyan and A. Zisserman. Very deep convolutional networks\nfor large-scale image recognition. In ICLR , 2015.",
          "reading_order": 40
        },
        {
          "label": "para",
          "bbox": [
            347,
            430,
            616,
            450
          ],
          "text": "[41] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway networks:\narXiv-1505.00387 , 2015.",
          "reading_order": 41
        },
        {
          "label": "para",
          "bbox": [
            347,
            455,
            616,
            474
          ],
          "text": "[42] R. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep\nnetworks. 1507.06228 , 2015.",
          "reading_order": 42
        },
        {
          "label": "para",
          "bbox": [
            347,
            474,
            615,
            510
          ],
          "text": "[43] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Er-\nhan, V. Vanhoucke, and A. Rabinovich. Going deeper with convolu-\ntions. In CVPR , 2015.",
          "reading_order": 43
        },
        {
          "label": "para",
          "bbox": [
            347,
            510,
            615,
            528
          ],
          "text": "[44] R. Szeliski. Fast surface interpolation using hierarchical basis func-\ntions. TPAMI , 1990.",
          "reading_order": 44
        },
        {
          "label": "para",
          "bbox": [
            347,
            528,
            616,
            555
          ],
          "text": "[45] R. Szeliski. Locally adapted hierarchical basis preconditioning. In\nSIGGRAPH , 2006.",
          "reading_order": 45
        },
        {
          "label": "para",
          "bbox": [
            347,
            555,
            616,
            600
          ],
          "text": "[46] T. Vatanen, T. Raiko, H. Valpola, and Y. LeCun. Pushing stochas-\ntic gradient towards second-order methods–backpropagation learn-\ning with transformations in nonlinearities. In Neural Information\nProcessing , 2013.",
          "reading_order": 46
        },
        {
          "label": "para",
          "bbox": [
            347,
            600,
            615,
            619
          ],
          "text": "[47] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library\nof computer vision algorithms, 2008.",
          "reading_order": 47
        },
        {
          "label": "para",
          "bbox": [
            347,
            619,
            616,
            645
          ],
          "text": "[48] W. Venables and B. Ripley. Modern applied statistics with s-plus\n1999.",
          "reading_order": 48
        },
        {
          "label": "para",
          "bbox": [
            347,
            645,
            615,
            663
          ],
          "text": "[49] M. D. Zeiler and R. Fergus. Visualizing and understanding convolu-\ntional neural networks. In ECCV , 2014.",
          "reading_order": 49
        },
        {
          "label": "foot",
          "bbox": [
            338,
            833,
            355,
            842
          ],
          "text": "723",
          "reading_order": 50
        }
      ]
    }
  ]
}